package com.example.cafeapp.repository

import android.content.Context
import android.util.Log
import com.google.firebase.firestore.FirebaseFirestore

/**–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤—Ö–æ–¥**/
class UsersRepository(private val context: Context) {

    private val firestore = FirebaseFirestore.getInstance()
    private val sharedPreferences =
        context.getSharedPreferences("CaffeAppPref", Context.MODE_PRIVATE)

    //–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    fun createAccount(userName: String, password: String, callback: (Boolean, String) -> Unit) {
        //–ü—Ä–æ–≤–µ—Ä–∫–∞,—á—Ç–æ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ –∏ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π.
        if (userName.isBlank() || password.isBlank()) {
            callback(false, "Invalid input")
            return
        }
        if (password.length < 6) {
            callback(false, "Password must be at least 6 characters")
            return
        }


        val userId = firestore.collection("Users").document().id//–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º id –∑–∞—Ä–∞–Ω–µ–µ.
        val userMap = hashMapOf(
            "userId" to userId,
            "userName" to userName.trim(),
            "password" to password.trim()
        )

        firestore.collection("Users").document(userId)
            .set(userMap)//–ò—Å–ø–æ–ª—å–∑—É–µ–º set() —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º id.
            .addOnSuccessListener {
                sharedPreferences.edit().putString("loggedInUser", userId).apply()
                Log.d("Firestore Debug", "User registered: '$userId'") // üî• –õ–æ–≥–∏—Ä—É–µ–º `userId`
                callback(true, "Account created successfully")
            }
            .addOnFailureListener { e ->
                Log.e("Firestore", "Error creating account: ${e.message}")
                callback(false, "Error creating account")
            }
    }

    fun login(userName: String, password: String, callback: (Boolean, String) -> Unit) {
        //–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ
        if (userName.isBlank() || password.isBlank()) {
            callback(false, "Fields cannot be empty")
            return
        }


        firestore.collection("Users").whereEqualTo("userName", userName).limit(1).get()
            .addOnSuccessListener { documents ->
                if (!documents.isEmpty) {
                    val user = documents.documents[0]
                    val storedPassword = user["password"] as String
                    val userId = user.id

                    if (storedPassword == password) {
                        sharedPreferences.edit().putString("loggedInUser", userId).apply()
                        Log.d("Firestore Debug", "User logged in: '$userId'") // üî• –õ–æ–≥–∏—Ä—É–µ–º `userId`
                        callback(true, "Login successful")
                    } else {
                        callback(false, "Incorrect password")
                    }
                } else {
                    callback(false, "User not found")
                }
            }
            .addOnFailureListener { e ->
                Log.e("Firestore", "DataBase error: ${e.message}")
                callback(false, "DataBase Error")
            }
    }

}